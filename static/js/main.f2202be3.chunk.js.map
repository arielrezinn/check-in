{"version":3,"sources":["components/emojiview.js","components/stats.js","components/profile.js","App.js","components/login.js","serviceWorker.js","index.js"],"names":["emoji","require","alreadyClicked","PosButton","props","state","background","emote","handleClick","bind","this","setState","console","log","Card","pad","onClick","align","justify","gap","elevation","Text","size","getUnicode","React","Component","NeuButton","NegButton","EmojiWindow","alert","Box","fill","overflow","flex","direction","Header","Heading","level","hours","Date","getHours","timeOfDay","firebase","auth","currentUser","displayName","split","Stats","width","margin","config","title","data","labels","datasets","options","innerRadius","legendPosition","chartXkcd","positionType","upRight","dataColors","startDate","endDate","values","date","count","Profile","user","photoURL","providerData","Avatar","src","email","App","Grommet","theme","grommet","themeMode","full","horizontal","Tabs","Tab","Button","label","primary","signOut","catch","error","code","message","Login","provider","GoogleAuthProvider","useState","round","signInWithPopup","Boolean","window","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","onAuthStateChanged","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2202be3.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, Card, Header, Heading, Text } from 'grommet'\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst emoji = require(\"emoji-dictionary\");\n\nvar alreadyClicked = false;\n\nclass PosButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      background: '',\n      emote: 'blush'\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    if (!alreadyClicked && !this.state.background) {\n      this.setState({\n        background: 'status-ok'\n      });\n      console.log('toggled state!');\n      alreadyClicked = true;\n    }\n  }\n  render() {\n    return (\n      <Card\n        pad='large'\n        onClick={() => this.handleClick()}\n        background={this.state.background}\n        align=\"center\"\n        justify=\"center\"\n        gap=\"xsmall\"\n        elevation='medium'\n      >\n        <Text size=\"xxlarge\">\n            {emoji.getUnicode(this.state.emote)}\n        </Text>\n        {this.state.background && <Text>\n          <b>31%</b> of users selected this today.\n        </Text>}\n      </Card>\n    )\n  }\n}\nclass NeuButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      background: '',\n      emote: 'expressionless'\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    if (!alreadyClicked && !this.state.background) {\n      this.setState({\n        background: 'status-warning'\n      });\n      console.log('toggled state!');\n      alreadyClicked = true;\n    }\n  }\n  render() {\n    return (\n      <Card\n        pad='large'\n        onClick={() => this.handleClick()}\n        background={this.state.background}\n        align=\"center\"\n        justify=\"center\"\n        gap=\"xsmall\"\n        elevation='medium'\n      >\n        <Text size=\"xxlarge\">\n            {emoji.getUnicode(this.state.emote)}\n        </Text>\n        {this.state.background && <Text>\n          <b>47%</b> of users selected this today.\n        </Text>}\n      </Card>\n    )\n  }\n}\nclass NegButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      background: '',\n      emote: 'cry'\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    if (!alreadyClicked && !this.state.background) {\n      this.setState({\n        background: 'status-error'\n      });\n      console.log('toggled state!');\n      alreadyClicked = true;\n    }\n  }\n  render() {\n    return (\n      <Card\n        pad='large'\n        onClick={() => this.handleClick()}\n        background={this.state.background}\n        align=\"center\"\n        justify=\"center\"\n        gap=\"xsmall\"\n        elevation='medium'\n      >\n        <Text size=\"xxlarge\">\n            {emoji.getUnicode(this.state.emote)}\n        </Text>\n        {this.state.background && <Text>\n          <b>22%</b> of users selected this today.\n        </Text>}\n      </Card>\n    )\n  }\n}\n\nfunction timeOfDay() {\n  var now = new Date();\n  var time = '';\n  var hours = now.getHours();\n  if (4 <= hours && hours < 12) time = 'morning';\n  else if (12 <= hours && hours < 18) time = 'afternoon';\n  else time = 'evening';\n  return time;\n}\n\nfunction getFirstName() {\n  const auth = firebase.auth();\n  var user = auth.currentUser;\n  var name = user.displayName;\n  return name.split(\" \")[0];\n}\n\nexport class EmojiWindow extends React.Component {\n    constructor() {\n        super();\n        // todo\n    }\n\n    handleCardClick() {\n      alert(\"Card clicked!\");\n    }\n\n    render() {\n        return (\n          <Box fill=\"vertical\" overflow=\"auto\" align=\"center\" justify='center' flex=\"grow\" direction=\"column\">\n            <Header align=\"center\" direction=\"row\" flex={false} justify=\"between\" gap=\"medium\">\n                <Heading level=\"2\">\n                {'Good ' + timeOfDay() + ', ' + getFirstName() + '! How are you doing today?'}\n                </Heading>\n            </Header>\n            <Box align=\"center\" justify=\"center\" direction=\"row-responsive\" gap='large'>\n                <PosButton />\n                <NeuButton />\n                <NegButton />\n            </Box>\n          </Box>\n        )\n    }\n}\n","import React from 'react'\nimport { Box } from 'grommet'\nimport chartXkcd from 'chart.xkcd';\nimport { Pie } from \"chart.xkcd-react\";\nimport CalendarHeatmap from 'react-calendar-heatmap'\nimport 'react-calendar-heatmap/dist/styles.css';\n\nexport class Stats extends React.Component {\n    constructor() {\n        super();\n        // todo\n    }\n\n    render() {\n        return (\n            <Box align=\"center\" justify=\"center\" direction='row-responsive' gap=\"medium\" fill>\n                <Box align='center' width='large' margin={{\"right\":\"large\"}}>\n                    <Pie\n                        config={{\n                            title: 'How are people doing today?', // optional\n                            data: {\n                                labels: ['well', 'okay', 'not well'],\n                                datasets: [{\n                                    data: [31, 47, 22],\n                                }],\n                            },\n                            options: { // optional\n                                innerRadius: 0.5,\n                                legendPosition: chartXkcd.config.positionType.upRight,\n                                dataColors: ['#00C781', '#FFAA15', '#FF4040']\n                            },\n                        }}\n                    />\n                </Box>\n                <Box align='center' width='large' margin={{\"left\":\"large\"}}>\n                    <CalendarHeatmap\n                        startDate={new Date('2016-01-01')}\n                        endDate={new Date('2016-04-01')}\n                        values={[\n                            { date: '2016-01-01', count: 12 },\n                            { date: '2016-01-22', count: 122 },\n                            { date: '2016-01-30', count: 38 },\n                            // ...and so on\n                        ]}\n                    />\n                </Box>\n            </Box>\n        )\n    }\n}\n","import React from 'react'\nimport { Avatar, Box, Text } from 'grommet'\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nfunction Profile() {\n  const auth = firebase.auth();\n  var user = auth.currentUser;\n  var photoURL = user.providerData[0].photoURL;\n  return (\n      <Box align=\"center\" justify=\"center\" direction=\"row\" pad=\"medium\" gap=\"large\" fill>\n        <Avatar src={photoURL} size='196px'/>\n        <Box align=\"left\" justify=\"center\">\n          <Text>\n            <b>Name:</b> {user.providerData[0].displayName}\n          </Text>\n          <Text>\n            <b>Email:</b> {user.providerData[0].email}\n          </Text>\n        </Box>\n      </Box>\n  )\n}\n\nexport default Profile;","\nimport React, { useState } from 'react';\nimport {\n  Box,\n  grommet,\n  Grommet,\n  Tab,\n  Tabs,\n  Button,\n  Image\n} from 'grommet';\nimport { EmojiWindow } from './components/emojiview';\nimport { Stats } from './components/stats';\nimport firebase from \"firebase/app\";\nimport Profile from './components/profile';\n\nfunction App() {\n  return (\n    <Grommet theme={grommet} themeMode=\"light\" full>\n      <Box direction=\"row\" flex overflow={{ horizontal: 'hidden'}} pad=\"medium\" fill>\n        <Tabs flex>\n          <Tab title='Check-In'>\n            <EmojiWindow></EmojiWindow>\n          </Tab>\n          <Tab title='Stats'>\n            <Stats></Stats>\n          </Tab>\n          <Tab title='Profile'>\n            <Profile />\n          </Tab>\n          <Button label=\"sign out\" primary \n            onClick={() => {\n              firebase.auth().signOut()\n              .catch(error => {\n                  console.log(error.code);\n                  console.log(error.message);\n              });\n            }}\n            margin={{\"left\":\"large\"}}\n          />\n        </Tabs>\n        \n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;","import React, {useState} from 'react'\nimport { Grommet, Box, Header, Heading, Text, TextInput, Button } from 'grommet'\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst theme = {\n  \"global\": {\n    \"colors\": {\n      \"background\": {\n        \"light\": \"#ffffff\",\n        \"dark\": \"#000000\"\n      }\n    },\n    \"font\": {\n      \"family\": \"-apple-system,\\n         BlinkMacSystemFont, \\n         \\\"Segoe UI\\\", \\n         Roboto, \\n         Oxygen, \\n         Ubuntu, \\n         Cantarell, \\n         \\\"Fira Sans\\\", \\n         \\\"Droid Sans\\\",  \\n         \\\"Helvetica Neue\\\", \\n         Arial, sans-serif,  \\n         \\\"Apple Color Emoji\\\", \\n         \\\"Segoe UI Emoji\\\", \\n         \\\"Segoe UI Symbol\\\"\"\n    }\n  },\n  \"button\": {\n    \"extend\": [\n      null\n    ]\n  }\n}\nfunction Login() {\n  const auth = firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n  const signInWithGoogle = () => {\n    auth.signInWithPopup(provider);\n  };\n  const [error, setError] = useState(null);\n  /*const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const signInWithEmailAndPasswordHandler = (event,email, password) => {\n    event.preventDefault();\n    auth.signInWithEmailAndPassword(email, password).catch(error => {\n    setError(\"Error signing in with password and email!\");\n      console.error(\"Error signing in with password and email\", error);\n    });\n  };*/\n\n  return (\n    <Grommet full theme={theme}>\n      <Box fill=\"vertical\" overflow=\"auto\" align=\"center\" flex=\"grow\">\n        <Header align=\"center\" direction=\"row\" flex={false} justify=\"between\" gap=\"medium\">\n          <Box align=\"center\" justify=\"center\">\n            <Heading level=\"2\">\n              sign in to check-in\n            </Heading>\n          </Box>\n        </Header>\n        <Box align=\"center\" justify=\"center\" gap=\"small\">\n          {error !== null && <Box align=\"center\" justify=\"center\" pad=\"small\" background={{\"color\":\"neutral-4\"}} round=\"small\">\n            <Text>\n              {error}\n            </Text>\n          </Box>}\n          <Button label=\"sign in with Google\" primary\n            onClick={() => {signInWithGoogle();}}\n          />\n        </Box>\n      </Box>\n    </Grommet>\n  )\n}\n\nexport default Login;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Login from './components/login';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n//import { auth } from \"firebase\";\nimport * as serviceWorker from './serviceWorker';\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCoA-VAaRvBPasNhr7RMes0hnfV7ENS37c\",\n  authDomain: \"checkin-57d38.firebaseapp.com\",\n  databaseURL: \"https://checkin-57d38.firebaseio.com\",\n  projectId: \"checkin-57d38\",\n  storageBucket: \"checkin-57d38.appspot.com\",\n  messagingSenderId: \"486350420152\",\n  appId: \"1:486350420152:web:eec1cb7f911f57a21a1c4d\",\n  measurementId: \"G-RH5BSTDDYQ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nauth.onAuthStateChanged(user => {\n  if (user) {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n      document.getElementById('root')\n    )\n  } else {\n    ReactDOM.render(\n      <React.StrictMode>\n        <Login />\n      </React.StrictMode>,\n      document.getElementById('root')\n    )\n  }\n})\n\n/*if (!auth.currentUser) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Login />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}*/\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}